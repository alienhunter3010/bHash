const Welcome = (
    <div class="col-lg-8 mx-auto">
        <h2 class="text-white mb-4">This is not the code you are looking for</h2>
        <p class="text-white-50">Web is a detail. Awesome code is under the hood.</p>
    </div>
);

const TagContext = React.createContext({
    tag: '',
    refresh: () => {},
});

class BHashTag extends React.Component {

    constructor(props) {
        super(props);

        this.state = {
          error: null,
          isLoaded: false
        };

        this.handleRefresh = this.handleRefresh.bind(this);
    }

    handleRefresh() {
        fetch(this.props.url)
          .then(res => res.json())
          .then(
            (result) => {
                this.props.items = result.items;
                this.setState({
                    isLoaded: true,
                    error: null
                });
            },
            // Note: it's important to handle errors here
            // instead of a catch() block so that we don't swallow
            // exceptions from actual bugs in components.
            (error) => {
              this.setState({
                isLoaded: true,
                error
              });
            }
          )
    }

    render() {
        return (
            <React.Fragment>
            {this.props.items.map(item => (
            <TagContext>
                {({tag, refresh}) => (
                    <a onClick={refresh.bind(this, item)} href="#posts"><span class="badge badge-secondary mx-1">#{item}</span></a>
                )}
            </TagContext>
            ))}
            { this.props.url != undefined ? (
                <a onClick={this.handleRefresh} ><span class="badge badge-primary mx-1"><i class="fas fa-sync-alt"></i></span></a>
            ) : ( <br/> ) }
            </React.Fragment>
        );
    }
}

function PositionalImage(props) {
    return props.mode ?
        <div class="col-lg-6 order-md-1 order-lg-1">
            <img class="img-fluid" src={props.url} alt="" />
        </div> :
        <div class="col-lg-6 order-md-1 order-lg-12">
            <img class="img-fluid" src={props.url} alt="" />
        </div>;
}

class PostStack extends React.Component {

  constructor(props) {
    super(props);

    this.state = {
      error: null,
      isLoaded: false,
      items: [],
      previousTag: undefined
    };

    this.handleRefresh = this.handleRefresh.bind(this);
  }

  postUpdate(url) {
    fetch(url)
      .then(res => res.json())
      .then(
        (result) => {
          this.setState({
            isLoaded: true,
            items: result.items,
            error: null
          });
        },
        // Note: it's important to handle errors here
        // instead of a catch() block so that we don't swallow
        // exceptions from actual bugs in components.
        (error) => {
          this.setState({
            isLoaded: true,
            error
          });
        }
      )
  }

  componentDidMount() {
      this.postUpdate("/s/byTime");
  }
  componentDidUpdate() {
      if (this.props.tag != this.state.previousTag) {
          this.setState({
              previousTag: this.props.tag
          });
          this.postUpdate(this.props.tag == '' ?
              "/s/byTime" :
              "/s/byTag/" + this.props.tag);
      }
  }

  handleRefresh(event) {
      if (this.props.tag == '' || this.props.tag == undefined) {
          this.postUpdate("/s/byTime");
      } else {
          this.setState({
              previousTag: this.props.tag + '_frc'
          });
      }
  }

  render() {
    const { error, isLoaded, items } = this.state;
    if (error) {
      return <div>Error: {error.message}</div>;
    } else if (!isLoaded) {
      return <div>Loading...</div>;
    } else {
        var c=0;
        const md = new Remarkable();
        items.map(item => {
            item.image = '/img/HashtagEightys.png';
            try {
                var cpxContent = JSON.parse(item.content);
                if (cpxContent.img != undefined) {
                    item.image = cpxContent.img;
                }
                if (cpxContent.md != undefined) {
                    item.content = md.render(cpxContent.md);
                } else {
                    item.content = cpxContent.content;
                }
            } catch (e) {
                item.image = '/img/HashtagEightys.png';
            }
            item.gravatarUrl = "https://gravatar.com/avatar/" + item.gravatar + '?s=40&d=robohash';
            item.odd = ++c % 2;
        });
      return (
        <React.Fragment>
        {items.map(item => (
        <div class="row justify-content-center no-gutters mb-5 mb-lg-0">

            <PositionalImage mode={item.odd} url={item.image} />

            <div class="col-lg-6 order-md-12 order-lg-6">
                <div class="bg-black text-center h-100 project">
                    <div class="d-flex h-100">
                        <div class="project-text w-100 my-auto text-center text-lg-left">
                            <h4 class="text-white"><img src={item.gravatarUrl} alt="profile" /> {item.username}</h4>
                            <p class="mb-0 text-white-50" dangerouslySetInnerHTML={{__html: item.content}} />
                            <hr class="d-none d-lg-block mb-0 ml-0" />
                            <small><i class="fas fa-clock"></i> {item.created}</small>
                            <div>
                                <BHashTag items={item.tags} />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        ))}
        <div class="scroll-to-top position-fixed mini-dash">
            <a class="js-scroll-trigger d-inline-block text-center text-white rounded" onClick={this.handleRefresh}>
              <i class="fas fa-sync-alt"></i>
            </a>
            <a class="js-scroll-trigger d-inline-block text-center text-white rounded" href="#page-top">
              <i class="fas fa-chevron-up"></i>
            </a>
        </div>
        </React.Fragment>
      );
    }
  }
}

class BHashApp extends React.Component {
    searchText='';

    constructor(props) {
        super(props);

        this.refreshPage = (tag) => {
            document.getElementById('inputHash').value = tag;
            this.refresh(tag);
        };

        this.state = {
            value: '',
            refresh: this.refreshPage
        };

        this.handleChange = this.handleChange.bind(this);
        this.handleSubmit = this.handleSubmit.bind(this);
    }

    refresh(tag) {
        this.props.tag = tag;
        this.setState({value: tag});
        this.searchText = tag;
        location.href = "#posts";
    }

    handleChange(event) {
        this.searchText = event.target.value;
    }

    handleSubmit(event) {
        event.preventDefault();
        if (this.searchText != event.target[0].value) {
            this.searchText = event.target[0].value;
        }
        this.refresh(this.searchText);
    }

    render() {
        return (
        <React.Fragment>
{/* Navigation */}
<nav class="navbar navbar-expand-lg navbar-light fixed-top" id="mainNav">
    <div class="container">
        <a class="navbar-brand js-scroll-trigger" href="#page-top">b<span class="cursor-hash">H</span>ash</a>
        <div id="navbarResponsive">
            <ul class="navbar-nav ml-auto">
                <li class="nav-item smooth-scroll">
                    <form id="formHash" class="form-inline d-flex" onSubmit={this.handleSubmit}>
                        <div class="input-group flex-fill wide">
                            <input type="filter" class="form-control" id="inputHash" placeholder="Filter an #hashtag" onChange={this.handleChange} />
                            <div class="input-group-append d-sm-flex d-md-none">
                              <span class="input-group-text">&#9166;</span>
                            </div>
                        </div>
                        <button id="submitHash" type="submit" class="btn btn-primary mx-auto mb-sm-2 mt-2 d-none d-sm-none d-md-block">Filter</button>
                    </form>
                </li>
            </ul>
        </div>
    </div>
</nav>

{/* Header */}
<header class="masthead signup-section">
    <div class="container d-flex h-100 align-items-center">
        <div class="mx-auto text-center">
            <h1 class="mx-auto px-5 my-0 text-uppercase">bHash</h1>
            <h2 class="text-white-50 mx-auto mt-2 mb-5">An unexpected social network.</h2>
        </div>
    </div>
</header>

{/* Posts Section */}
<section id="posts" class="projects-section posts-section bg-black">
    <div class="container">
        <TagContext.Provider value={this.state}>
            <PostStack tag={this.props.tag} />
        </TagContext.Provider>
        <img src="/img/ipad.png" class="img-fluid" alt="" />
    </div>
</section>

<section class="contact-section bg-light">
    <div class="container">
        <div class="row">
            <div class="col-md-4 mb-3 mb-md-0">
                <div class="card py-4 h-100 bg-hot">
                    <div class="card-body text-center">
                        <i class="fas fa-fire-alt text-hot mb-2"></i>
                        <h4 class="text-uppercase m-0">Hot</h4>
                        <hr class="my-4 text-hot" />
                        <TagContext.Provider value={this.state}>
                            {this.props.hots}
                        </TagContext.Provider>
                    </div>
                </div>
            </div>

            <div class="col-md-4 mb-3 mb-md-0">
                <div class="card py-4 h-100 bg-last">
                    <div class="card-body text-center">
                        <i class="fas fa-clock text-last mb-2"></i>
                        <h4 class="text-uppercase m-0">Last</h4>
                        <hr class="my-4 text-last" />
                        <TagContext.Provider value={this.state}>
                            {this.props.last}
                        </TagContext.Provider>
                    </div>
                </div>
            </div>

            <div class="col-md-4 mb-3 mb-md-0">
                <div class="card py-4 h-100 bg-trend">
                    <div class="card-body text-center">
                        <i class="fas fa-eye text-trend mb-2"></i>
                        <h4 class="text-uppercase m-0">Trend</h4>
                        <hr class="my-4 text-trend" />
                        <TagContext.Provider value={this.state}>
                            {this.props.trend}
                        </TagContext.Provider>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

        </React.Fragment>
        );
    }
}
